
inline float interpolate(float val, float y0, float x0, float y1, float x1) {
    return (val - x0) * (y1 - y0) * native_recip(x1 - x0) + y0;
}


inline float base(float val) {
    if (val <= -0.75f) return 0.0f;
    else if (val <= -0.25f) return interpolate(val, 0.0f, -0.75f, 1.0f, -0.25f);
    else if (val <=  0.25f) return 1.0f;
    else if (val <=  0.75f) return interpolate(val, 1.0f, 0.25f, 0.0f, 0.75f);
    else return 0.0f;
}

inline float4 gray2color(float gray) {
    float4 color;
    color.w = native_powr(gray, 0.5f);
    gray = (gray - 0.5f) * 2.0f;
    color.x = base(gray - 0.5f);
    color.y = base(gray       );
    color.z = base(gray + 0.5f);
    return color;
}

kernel void cplx2db(global float2* c, global float* m) {
    const int idx = get_global_id(0);
    m[idx] = log10(hypot(c[idx].x, c[idx].y)) * 10.0f;
}

kernel void cplxmulv(global float2* c, global float* v) {
    const int idx = get_global_id(0);
    c[idx].x *= v[idx];
    c[idx].y *= v[idx];
}

void lines(global float* img, uint width, uint height, int2 coord, float color) {

    if (coord.y >= height) {
        coord.y = -1;
    }
    const int range = 32;
    int b = (coord.y - range < 0) ? 0 : coord.y - range;
    for (int i = b; i <= coord.y; i++) {
        img[coord.x + i * width] +=  color;
    }

}

kernel void mag2frame(global float* mag, global float* frame,  
        write_only image2d_t waterfall, global float2 *spectrum, 
        uint height, uint wline, float level, float scale, float weight) {

    const size_t index = get_global_id(0);
    const size_t width = get_global_size(0);

    const int y   = (int)((mag[index] + level) * scale);
    const int pos = index + y * width;
    
    for (int j = 0; j < height; j++) {
        frame[index + j * width] = 0.0f;
    }

    lines(frame, width, height, (int2)(index, y), weight);
    // if (y >= 0 && y < height) {
    //     frame[pos] = weight;
    // }

    float color = (float)(y) * native_recip((float)height);
    color = clamp(color, 0.0f, 1.0f);
    write_imagef(waterfall, (int2)(index, wline), gray2color(color));
    
    int i = (2 * index < width) ? index + width / 2 : index - width / 2;
    spectrum[i].x = (float)i / (float)width;

    float m = mag[index];

    m = -((m + level) * scale) / (float)(height);
    m = clamp(m, -1.0f, 0.0f);

    if (m < spectrum[i].y) {
        spectrum[i].y = m * 0.97f + spectrum[i].y * 0.03f;
    }
    else {
        spectrum[i].y = m * 0.03f + spectrum[i].y * 0.97f;
    }
}

kernel void frame2tex(global float* frame, global float* sum, 
        write_only image2d_t tex, float decay) {
    const size_t x = get_global_id(0);
    const size_t y = get_global_id(1);
    const int width  = get_global_size(0);
    const int height = get_global_size(1);
    const int index = x + y * width;
    float4 color;
    float gray;

    sum[index] = sum[index] * (decay - frame[index]) + frame[index];
    sum[index] = clamp(sum[index], 0.0f, 1.0f);

    gray = (sum[index] - 0.5f) * 2.0f;
    gray = clamp(gray, -1.0f, 1.0f);
    color.x = base(gray - 0.5f);
    color.y = base(gray       );
    color.z = base(gray + 0.5f);
    // color.w = clamp(pow(sum[index], 0.5f), 0.0f, 1.0f);
    color.w = native_powr(sum[index], 0.5f);
    write_imagef(tex, (int2)(x, y), color);
}

constant float tsin[] = {
0.0000000000000000000f, 
0.0061358846724033356f, 
0.0122715383768081670f, 
0.0184067301452159880f, 
0.0245412290096282960f, 
0.0306748040020465850f, 
0.0368072241544723510f, 
0.0429382584989070890f, 
0.0490676760673522950f, 
0.0551952458918094640f, 
0.0613207407295703890f, 
0.0674439221620559690f, 
0.0735645666718482970f, 
0.0796824395656585690f, 
0.0857973173260688780f, 
0.0919089540839195250f, 
0.0980171412229537960f, 
0.1041216403245925900f, 
0.1102222055196762100f, 
0.1163186356425285300f, 
0.1224106773734092700f, 
0.1284981220960617100f, 
0.1345807164907455400f, 
0.1406582444906234700f, 
0.1467304676771163900f, 
0.1527971923351287800f, 
0.1588581502437591600f, 
0.1649131327867507900f, 
0.1709619015455246000f, 
0.1770042181015014600f, 
0.1830398887395858800f, 
0.1890686601400375400f, 
0.1950903236865997300f, 
0.2011046409606933600f, 
0.2071113884449005100f, 
0.2131103277206420900f, 
0.2191012352705001800f, 
0.2250839173793792700f, 
0.2310581207275390600f, 
0.2370236068964004500f, 
0.2429801970720291100f, 
0.2489276081323623700f, 
0.2548656761646270800f, 
0.2607941329479217500f, 
0.2667127847671508800f, 
0.2726213634014129600f, 
0.2785196900367736800f, 
0.2844075560569763200f, 
0.2902846634387970000f, 
0.2961508929729461700f, 
0.3020059466361999500f, 
0.3078496754169464100f, 
0.3136817514896392800f, 
0.3195020258426666300f, 
0.3253103196620941200f, 
0.3311063051223754900f, 
0.3368898630142211900f, 
0.3426607251167297400f, 
0.3484186828136444100f, 
0.3541635274887085000f, 
0.3598950505256652800f, 
0.3656130135059356700f, 
0.3713172078132629400f, 
0.3770074248313903800f, 
0.3826834559440612800f, 
0.3883450329303741500f, 
0.3939920663833618200f, 
0.3996241986751556400f, 
0.4052413403987884500f, 
0.4108431935310363800f, 
0.4164295792579650900f, 
0.4220002889633178700f, 
0.4275550842285156300f, 
0.4330938458442688000f, 
0.4386162459850311300f, 
0.4441221654415130600f, 
0.4496113359928131100f, 
0.4550835788249969500f, 
0.4605387151241302500f, 
0.4659765064716339100f, 
0.4713967442512512200f, 
0.4767992496490478500f, 
0.4821837544441223100f, 
0.4875501692295074500f, 
0.4928982257843017600f, 
0.4982276558876037600f, 
0.5035383701324462900f, 
0.5088301897048950200f, 
0.5141027569770813000f, 
0.5193560123443603500f, 
0.5245897173881530800f, 
0.5298036336898803700f, 
0.5349976420402526900f, 
0.5401715040206909200f, 
0.5453249812126159700f, 
0.5504580140113830600f, 
0.5555702447891235400f, 
0.5606616139411926300f, 
0.5657318234443664600f, 
0.5707807540893554700f, 
0.5758082270622253400f, 
0.5808140039443969700f, 
0.5857979059219360400f, 
0.5907596945762634300f, 
0.5956993103027343800f, 
0.6006165146827697800f, 
0.6055110096931457500f, 
0.6103827953338623000f, 
0.6152316331863403300f, 
0.6200572252273559600f, 
0.6248595118522644000f, 
0.6296382546424865700f, 
0.6343933343887329100f, 
0.6391244530677795400f, 
0.6438315510749816900f, 
0.6485144495964050300f, 
0.6531728506088256800f, 
0.6578066945075988800f, 
0.6624158024787902800f, 
0.6669999361038208000f, 
0.6715589761734008800f, 
0.6760927438735961900f, 
0.6806010007858276400f, 
0.6850836873054504400f, 
0.6895405650138855000f, 
0.6939714550971984900f, 
0.6983762979507446300f, 
0.7027547359466552700f, 
0.7071067690849304200f, 
0.7114322185516357400f, 
0.7157308459281921400f, 
0.7200025320053100600f, 
0.7242470979690551800f, 
0.7284644246101379400f, 
0.7326542735099792500f, 
0.7368165850639343300f, 
0.7409511804580688500f, 
0.7450577616691589400f, 
0.7491363883018493700f, 
0.7531868219375610400f, 
0.7572088837623596200f, 
0.7612023949623107900f, 
0.7651672959327697800f, 
0.7691033482551574700f, 
0.7730104327201843300f, 
0.7768884897232055700f, 
0.7807372808456420900f, 
0.7845566272735595700f, 
0.7883464097976684600f, 
0.7921065688133239700f, 
0.7958369255065918000f, 
0.7995373010635376000f, 
0.8032075166702270500f, 
0.8068475723266601600f, 
0.8104571700096130400f, 
0.8140363097190856900f, 
0.8175848126411438000f, 
0.8211025595664978000f, 
0.8245893120765686000f, 
0.8280450701713562000f, 
0.8314696550369262700f, 
0.8348628878593444800f, 
0.8382247090339660600f, 
0.8415549397468566900f, 
0.8448535799980163600f, 
0.8481203317642211900f, 
0.8513551950454711900f, 
0.8545579910278320300f, 
0.8577286601066589400f, 
0.8608669638633728000f, 
0.8639728426933288600f, 
0.8670462369918823200f, 
0.8700869679450988800f, 
0.8730949759483337400f, 
0.8760701417922973600f, 
0.8790122866630554200f, 
0.8819212913513183600f, 
0.8847970962524414100f, 
0.8876396417617797900f, 
0.8904487490653991700f, 
0.8932242989540100100f, 
0.8959662914276123000f, 
0.8986744880676269500f, 
0.9013488888740539600f, 
0.9039893150329589800f, 
0.9065957069396972700f, 
0.9091680049896240200f, 
0.9117060303688049300f, 
0.9142097830772399900f, 
0.9166790843009948700f, 
0.9191138744354248000f, 
0.9215140342712402300f, 
0.9238795042037963900f, 
0.9262102246284484900f, 
0.9285060763359069800f, 
0.9307669997215271000f, 
0.9329928159713745100f, 
0.9351835250854492200f, 
0.9373390078544616700f, 
0.9394592046737670900f, 
0.9415440559387207000f, 
0.9435934424400329600f, 
0.9456073641777038600f, 
0.9475856423377990700f, 
0.9495282173156738300f, 
0.9514350295066833500f, 
0.9533060193061828600f, 
0.9551411867141723600f, 
0.9569403529167175300f, 
0.9587035179138183600f, 
0.9604305624961853000f, 
0.9621214270591735800f, 
0.9637760519981384300f, 
0.9653944373130798300f, 
0.9669764637947082500f, 
0.9685221314430236800f, 
0.9700312614440918000f, 
0.9715039134025573700f, 
0.9729399681091308600f, 
0.9743393659591674800f, 
0.9757021069526672400f, 
0.9770281314849853500f, 
0.9783173799514770500f, 
0.9795697927474975600f, 
0.9807853102684021000f, 
0.9819638729095459000f, 
0.9831054806709289600f, 
0.9842100739479064900f, 
0.9852776527404785200f, 
0.9863080978393554700f, 
0.9873014092445373500f, 
0.9882575869560241700f, 
0.9891765117645263700f, 
0.9900581836700439500f, 
0.9909026622772216800f, 
0.9917097687721252400f, 
0.9924795627593994100f, 
0.9932119846343994100f, 
0.9939069747924804700f, 
0.9945645928382873500f, 
0.9951847195625305200f, 
0.9957674145698547400f, 
0.9963126182556152300f, 
0.9968203306198120100f, 
0.9972904324531555200f, 
0.9977230429649353000f, 
0.9981181025505065900f, 
0.9984755516052246100f, 
0.9987954497337341300f, 
0.9990777373313903800f, 
0.9993224143981933600f, 
0.9995294213294982900f, 
0.9996988177299499500f, 
0.9998306035995483400f, 
0.9999247193336486800f, 
0.9999811649322509800f, 
1.0000000000000000000f, 
0.9999811649322509800f, 
0.9999247193336486800f, 
0.9998306035995483400f, 
0.9996988177299499500f, 
0.9995294213294982900f, 
0.9993223547935485800f, 
0.9990777373313903800f, 
0.9987954497337341300f, 
0.9984755516052246100f, 
0.9981181025505065900f, 
0.9977230429649353000f, 
0.9972904324531555200f, 
0.9968202710151672400f, 
0.9963126182556152300f, 
0.9957674145698547400f, 
0.9951847195625305200f, 
0.9945645332336425800f, 
0.9939069747924804700f, 
0.9932119250297546400f, 
0.9924795031547546400f, 
0.9917097687721252400f, 
0.9909026026725769000f, 
0.9900581836700439500f, 
0.9891765117645263700f, 
0.9882575869560241700f, 
0.9873014092445373500f, 
0.9863080978393554700f, 
0.9852776527404785200f, 
0.9842100739479064900f, 
0.9831054806709289600f, 
0.9819638729095459000f, 
0.9807852506637573200f, 
0.9795697331428527800f, 
0.9783173799514770500f, 
0.9770281314849853500f, 
0.9757021069526672400f, 
0.9743393659591674800f, 
0.9729399085044860800f, 
0.9715039134025573700f, 
0.9700312614440918000f, 
0.9685220718383789100f, 
0.9669764637947082500f, 
0.9653944373130798300f, 
0.9637760519981384300f, 
0.9621214270591735800f, 
0.9604305028915405300f, 
0.9587034583091735800f, 
0.9569402933120727500f, 
0.9551411271095275900f, 
0.9533060193061828600f, 
0.9514349699020385700f, 
0.9495281577110290500f, 
0.9475855827331543000f, 
0.9456073045730590800f, 
0.9435934424400329600f, 
0.9415440559387207000f, 
0.9394592046737670900f, 
0.9373389482498168900f, 
0.9351835250854492200f, 
0.9329928159713745100f, 
0.9307669401168823200f, 
0.9285060763359069800f, 
0.9262102246284484900f, 
0.9238795042037963900f, 
0.9215139746665954600f, 
0.9191138744354248000f, 
0.9166790246963501000f, 
0.9142097234725952100f, 
0.9117060303688049300f, 
0.9091680049896240200f, 
0.9065957069396972700f, 
0.9039893150329589800f, 
0.9013488292694091800f, 
0.8986744284629821800f, 
0.8959662318229675300f, 
0.8932242989540100100f, 
0.8904486894607543900f, 
0.8876395821571350100f, 
0.8847970366477966300f, 
0.8819212317466735800f, 
0.8790121674537658700f, 
0.8760700225830078100f, 
0.8730949163436889600f, 
0.8700870275497436500f, 
0.8670462369918823200f, 
0.8639728426933288600f, 
0.8608669638633728000f, 
0.8577286005020141600f, 
0.8545579910278320300f, 
0.8513551354408264200f, 
0.8481203317642211900f, 
0.8448535203933715800f, 
0.8415549397468566900f, 
0.8382246494293212900f, 
0.8348627686500549300f, 
0.8314695358276367200f, 
0.8280450701713562000f, 
0.8245893120765686000f, 
0.8211024999618530300f, 
0.8175848126411438000f, 
0.8140363097190856900f, 
0.8104571700096130400f, 
0.8068475127220153800f, 
0.8032075166702270500f, 
0.7995372414588928200f, 
0.7958368659019470200f, 
0.7921065092086792000f, 
0.7883463501930236800f, 
0.7845565080642700200f, 
0.7807371020317077600f, 
0.7768884897232055700f, 
0.7730104923248291000f, 
0.7691033482551574700f, 
0.7651672363281250000f, 
0.7612023949623107900f, 
0.7572088241577148400f, 
0.7531867623329162600f, 
0.7491363286972045900f, 
0.7450577020645141600f, 
0.7409510612487793000f, 
0.7368164658546447800f, 
0.7326541543006897000f, 
0.7284643054008483900f, 
0.7242469787597656300f, 
0.7200025320053100600f, 
0.7157308459281921400f, 
0.7114322185516357400f, 
0.7071067690849304200f, 
0.7027547359466552700f, 
0.6983762383460998500f, 
0.6939713954925537100f, 
0.6895405054092407200f, 
0.6850836277008056600f, 
0.6806009411811828600f, 
0.6760926246643066400f, 
0.6715588569641113300f, 
0.6669998168945312500f, 
0.6624156236648559600f, 
0.6578066945075988800f, 
0.6531728506088256800f, 
0.6485143899917602500f, 
0.6438315510749816900f, 
0.6391243934631347700f, 
0.6343932747840881300f, 
0.6296381950378418000f, 
0.6248594522476196300f, 
0.6200571060180664100f, 
0.6152315139770507800f, 
0.6103826761245727500f, 
0.6055109500885009800f, 
0.6006163358688354500f, 
0.5956991314888000500f, 
0.5907597541809082000f, 
0.5857978463172912600f, 
0.5808139443397522000f, 
0.5758081674575805700f, 
0.5707806944847106900f, 
0.5657317638397216800f, 
0.5606614947319030800f, 
0.5555701851844787600f, 
0.5504578948020935100f, 
0.5453248620033264200f, 
0.5401713848114013700f, 
0.5349974632263183600f, 
0.5298034548759460400f, 
0.5245895385742187500f, 
0.5193560123443603500f, 
0.5141027569770813000f, 
0.5088301301002502400f, 
0.5035383701324462900f, 
0.4982276260852813700f, 
0.4928981363773345900f, 
0.4875501096248626700f, 
0.4821836948394775400f, 
0.4767991304397583000f, 
0.4713966250419616700f, 
0.4659763574600219700f, 
0.4605385661125183100f, 
0.4550834298133850100f, 
0.4496113657951355000f, 
0.4441221654415130600f, 
0.4386162459850311300f, 
0.4330938160419464100f, 
0.4275550544261932400f, 
0.4220002293586731000f, 
0.4164294898509979200f, 
0.4108431041240692100f, 
0.4052412211894989000f, 
0.3996241092681884800f, 
0.3939919173717498800f, 
0.3883449137210845900f, 
0.3826832771301269500f, 
0.3770072460174560500f, 
0.3713172376155853300f, 
0.3656130135059356700f, 
0.3598950505256652800f, 
0.3541634976863861100f, 
0.3484186530113220200f, 
0.3426606655120849600f, 
0.3368898034095764200f, 
0.3311062157154083300f, 
0.3253102004528045700f, 
0.3195019066333770800f, 
0.3136816024780273400f, 
0.3078494966030120800f, 
0.3020057976245880100f, 
0.2961507141590118400f, 
0.2902847230434417700f, 
0.2844075560569763200f, 
0.2785196900367736800f, 
0.2726213335990905800f, 
0.2667127251625061000f, 
0.2607940733432769800f, 
0.2548655867576599100f, 
0.2489275187253952000f, 
0.2429800778627395600f, 
0.2370234876871109000f, 
0.2310579717159271200f, 
0.2250837534666061400f, 
0.2191010713577270500f, 
0.2131101340055465700f, 
0.2071114033460617100f, 
0.2011046409606933600f, 
0.1950903087854385400f, 
0.1890686452388763400f, 
0.1830398440361022900f, 
0.1770041584968566900f, 
0.1709618121385574300f, 
0.1649130284786224400f, 
0.1588580310344696000f, 
0.1527970582246780400f, 
0.1467303335666656500f, 
0.1406580805778503400f, 
0.1345805227756500200f, 
0.1284979134798049900f, 
0.1224106997251510600f, 
0.1163186356425285300f, 
0.1102221980690956100f, 
0.1041216030716896100f, 
0.0980170965194702150f, 
0.0919088944792747500f, 
0.0857972279191017150f, 
0.0796823352575302120f, 
0.0735644474625587460f, 
0.0674437880516052250f, 
0.0613205842673778530f, 
0.0551950745284557340f, 
0.0490674860775470730f, 
0.0429380536079406740f, 
0.0368072390556335450f, 
0.0306748021394014360f, 
0.0245412103831768040f, 
0.0184066947549581530f, 
0.0122714852914214130f, 
0.0061358148232102394f
};

constant float tcos[] = {
0.9999811649322509800f, 
0.9999247193336486800f, 
0.9998306035995483400f, 
0.9996988177299499500f, 
0.9995294213294982900f, 
0.9993223547935485800f, 
0.9990777373313903800f, 
0.9987954497337341300f, 
0.9984755516052246100f, 
0.9981181025505065900f, 
0.9977230429649353000f, 
0.9972904324531555200f, 
0.9968202710151672400f, 
0.9963126182556152300f, 
0.9957674145698547400f, 
0.9951847195625305200f, 
0.9945645928382873500f, 
0.9939069747924804700f, 
0.9932119250297546400f, 
0.9924795627593994100f, 
0.9917097687721252400f, 
0.9909026622772216800f, 
0.9900581836700439500f, 
0.9891765117645263700f, 
0.9882575869560241700f, 
0.9873014092445373500f, 
0.9863080978393554700f, 
0.9852776527404785200f, 
0.9842100739479064900f, 
0.9831054806709289600f, 
0.9819638729095459000f, 
0.9807852506637573200f, 
0.9795697927474975600f, 
0.9783173799514770500f, 
0.9770281314849853500f, 
0.9757021069526672400f, 
0.9743393659591674800f, 
0.9729399681091308600f, 
0.9715039134025573700f, 
0.9700312614440918000f, 
0.9685220718383789100f, 
0.9669764637947082500f, 
0.9653944373130798300f, 
0.9637760519981384300f, 
0.9621214270591735800f, 
0.9604305028915405300f, 
0.9587034583091735800f, 
0.9569403529167175300f, 
0.9551411867141723600f, 
0.9533060193061828600f, 
0.9514350295066833500f, 
0.9495281577110290500f, 
0.9475855827331543000f, 
0.9456073045730590800f, 
0.9435934424400329600f, 
0.9415440559387207000f, 
0.9394592046737670900f, 
0.9373390078544616700f, 
0.9351835250854492200f, 
0.9329928159713745100f, 
0.9307669401168823200f, 
0.9285060763359069800f, 
0.9262102246284484900f, 
0.9238795042037963900f, 
0.9215140342712402300f, 
0.9191138744354248000f, 
0.9166790843009948700f, 
0.9142097234725952100f, 
0.9117060303688049300f, 
0.9091679453849792500f, 
0.9065957069396972700f, 
0.9039893150329589800f, 
0.9013488292694091800f, 
0.8986744880676269500f, 
0.8959662318229675300f, 
0.8932242989540100100f, 
0.8904487490653991700f, 
0.8876396417617797900f, 
0.8847970962524414100f, 
0.8819212317466735800f, 
0.8790122270584106400f, 
0.8760700821876525900f, 
0.8730949759483337400f, 
0.8700869679450988800f, 
0.8670462369918823200f, 
0.8639728426933288600f, 
0.8608669042587280300f, 
0.8577286005020141600f, 
0.8545579910278320300f, 
0.8513551950454711900f, 
0.8481203317642211900f, 
0.8448535799980163600f, 
0.8415549993515014600f, 
0.8382247090339660600f, 
0.8348628282546997100f, 
0.8314695954322814900f, 
0.8280450105667114300f, 
0.8245892524719238300f, 
0.8211024999618530300f, 
0.8175848126411438000f, 
0.8140363097190856900f, 
0.8104571700096130400f, 
0.8068475723266601600f, 
0.8032075166702270500f, 
0.7995372414588928200f, 
0.7958369255065918000f, 
0.7921065688133239700f, 
0.7883464097976684600f, 
0.7845566272735595700f, 
0.7807372212409973100f, 
0.7768884301185607900f, 
0.7730104327201843300f, 
0.7691033482551574700f, 
0.7651672363281250000f, 
0.7612023353576660200f, 
0.7572088241577148400f, 
0.7531868219375610400f, 
0.7491363883018493700f, 
0.7450577616691589400f, 
0.7409511208534240700f, 
0.7368165850639343300f, 
0.7326542735099792500f, 
0.7284643650054931600f, 
0.7242470979690551800f, 
0.7200024724006652800f, 
0.7157307863235473600f, 
0.7114322185516357400f, 
0.7071067690849304200f, 
0.7027547359466552700f, 
0.6983762383460998500f, 
0.6939714550971984900f, 
0.6895405054092407200f, 
0.6850836277008056600f, 
0.6806010007858276400f, 
0.6760926842689514200f, 
0.6715589165687561000f, 
0.6669999361038208000f, 
0.6624157428741455100f, 
0.6578066945075988800f, 
0.6531727910041809100f, 
0.6485143899917602500f, 
0.6438315510749816900f, 
0.6391243934631347700f, 
0.6343932747840881300f, 
0.6296381950378418000f, 
0.6248594522476196300f, 
0.6200571656227111800f, 
0.6152315735816955600f, 
0.6103827953338623000f, 
0.6055110096931457500f, 
0.6006164550781250000f, 
0.5956993103027343800f, 
0.5907596945762634300f, 
0.5857978463172912600f, 
0.5808139443397522000f, 
0.5758081674575805700f, 
0.5707806944847106900f, 
0.5657318234443664600f, 
0.5606615543365478500f, 
0.5555701851844787600f, 
0.5504579544067382800f, 
0.5453249812126159700f, 
0.5401715040206909200f, 
0.5349976420402526900f, 
0.5298036336898803700f, 
0.5245896577835083000f, 
0.5193559527397155800f, 
0.5141026973724365200f, 
0.5088300704956054700f, 
0.5035384297370910600f, 
0.4982276856899261500f, 
0.4928981959819793700f, 
0.4875501394271850600f, 
0.4821837246417999300f, 
0.4767991602420806900f, 
0.4713966548442840600f, 
0.4659765064716339100f, 
0.4605387151241302500f, 
0.4550835788249969500f, 
0.4496113061904907200f, 
0.4441221058368682900f, 
0.4386161863803863500f, 
0.4330937564373016400f, 
0.4275551140308380100f, 
0.4220002591609954800f, 
0.4164295494556427000f, 
0.4108431339263916000f, 
0.4052412807941436800f, 
0.3996241390705108600f, 
0.3939919471740722700f, 
0.3883450627326965300f, 
0.3826834261417388900f, 
0.3770073950290679900f, 
0.3713171482086181600f, 
0.3656129539012908900f, 
0.3598949611186981200f, 
0.3541634380817413300f, 
0.3484186828136444100f, 
0.3426607251167297400f, 
0.3368898332118988000f, 
0.3311062753200531000f, 
0.3253102302551269500f, 
0.3195019662380218500f, 
0.3136816620826721200f, 
0.3078496456146240200f, 
0.3020059466361999500f, 
0.2961508631706237800f, 
0.2902846336364746100f, 
0.2844074666500091600f, 
0.2785196006298065200f, 
0.2726212739944458000f, 
0.2667127549648284900f, 
0.2607941031455993700f, 
0.2548656463623046900f, 
0.2489275634288787800f, 
0.2429801225662231400f, 
0.2370235323905944800f, 
0.2310581356287002600f, 
0.2250839173793792700f, 
0.2191012203693389900f, 
0.2131102830171585100f, 
0.2071113288402557400f, 
0.2011045664548873900f, 
0.1950902342796325700f, 
0.1890686899423599200f, 
0.1830398887395858800f, 
0.1770042032003402700f, 
0.1709618568420410200f, 
0.1649130731821060200f, 
0.1588580757379531900f, 
0.1527971029281616200f, 
0.1467304974794387800f, 
0.1406582444906234700f, 
0.1345806866884231600f, 
0.1284980773925781300f, 
0.1224106252193450900f, 
0.1163185611367225600f, 
0.1102221161127090500f, 
0.1041216477751731900f, 
0.0980171337723731990f, 
0.0919089391827583310f, 
0.0857972726225852970f, 
0.0796823799610137940f, 
0.0735644921660423280f, 
0.0674438327550888060f, 
0.0613207481801509860f, 
0.0551952384412288670f, 
0.0490676499903202060f, 
0.0429382175207138060f, 
0.0368071645498275760f, 
0.0306747276335954670f, 
0.0245411358773708340f, 
0.0184067375957965850f, 
0.0122715290635824200f, 
0.0061358581297099590f, 
-0.0000000437113882867f, 
-0.0061359456740319729f, 
-0.0122716166079044340f, 
-0.0184068251401185990f, 
-0.0245412234216928480f, 
-0.0306748151779174800f, 
-0.0368072502315044400f, 
-0.0429383032023906710f, 
-0.0490677393972873690f, 
-0.0551953241229057310f, 
-0.0613208338618278500f, 
-0.0674439147114753720f, 
-0.0735645741224288940f, 
-0.0796824693679809570f, 
-0.0857973620295524600f, 
-0.0919090211391448970f, 
-0.0980172231793403630f, 
-0.1041217371821403500f, 
-0.1102222055196762100f, 
-0.1163186505436897300f, 
-0.1224107071757316600f, 
-0.1284981667995452900f, 
-0.1345807760953903200f, 
-0.1406583189964294400f, 
-0.1467305719852447500f, 
-0.1527971923351287800f, 
-0.1588581651449203500f, 
-0.1649131625890731800f, 
-0.1709619462490081800f, 
-0.1770042926073074300f, 
-0.1830399781465530400f, 
-0.1890687644481658900f, 
-0.1950903236865997300f, 
-0.2011046558618545500f, 
-0.2071114182472229000f, 
-0.2131103724241256700f, 
-0.2191013097763061500f, 
-0.2250840067863464400f, 
-0.2310582101345062300f, 
-0.2370236068964004500f, 
-0.2429801970720291100f, 
-0.2489276528358459500f, 
-0.2548657059669494600f, 
-0.2607941925525665300f, 
-0.2667128443717956500f, 
-0.2726213335990905800f, 
-0.2785196900367736800f, 
-0.2844075560569763200f, 
-0.2902847230434417700f, 
-0.2961509525775909400f, 
-0.3020060360431671100f, 
-0.3078497350215911900f, 
-0.3136817216873168900f, 
-0.3195020556449890100f, 
-0.3253103196620941200f, 
-0.3311063647270202600f, 
-0.3368899226188659700f, 
-0.3426607847213745100f, 
-0.3484187722206115700f, 
-0.3541635274887085000f, 
-0.3598950505256652800f, 
-0.3656130135059356700f, 
-0.3713172376155853300f, 
-0.3770074844360351600f, 
-0.3826835155487060500f, 
-0.3883451521396637000f, 
-0.3939920365810394300f, 
-0.3996242284774780300f, 
-0.4052413403987884500f, 
-0.4108432233333587600f, 
-0.4164295196533203100f, 
-0.4220002293586731000f, 
-0.4275550842285156300f, 
-0.4330938160419464100f, 
-0.4386162459850311300f, 
-0.4441221654415130600f, 
-0.4496113657951355000f, 
-0.4550836384296417200f, 
-0.4605388045310974100f, 
-0.4659765958786010700f, 
-0.4713968336582183800f, 
-0.4767993688583374000f, 
-0.4821839034557342500f, 
-0.4875503182411193800f, 
-0.4928981661796569800f, 
-0.4982276558876037600f, 
-0.5035383701324462900f, 
-0.5088301301002502400f, 
-0.5141027569770813000f, 
-0.5193560123443603500f, 
-0.5245897173881530800f, 
-0.5298036932945251500f, 
-0.5349977016448974600f, 
-0.5401715636253356900f, 
-0.5453251004219055200f, 
-0.5504580736160278300f, 
-0.5555703639984130900f, 
-0.5606615543365478500f, 
-0.5657317638397216800f, 
-0.5707807540893554700f, 
-0.5758081674575805700f, 
-0.5808139443397522000f, 
-0.5857979059219360400f, 
-0.5907597541809082000f, 
-0.5956993699073791500f, 
-0.6006165742874145500f, 
-0.6055111289024353000f, 
-0.6103829145431518600f, 
-0.6152316927909851100f, 
-0.6200573444366455100f, 
-0.6248596310615539600f, 
-0.6296381950378418000f, 
-0.6343932747840881300f, 
-0.6391244530677795400f, 
-0.6438315510749816900f, 
-0.6485143899917602500f, 
-0.6531728506088256800f, 
-0.6578067541122436500f, 
-0.6624158024787902800f, 
-0.6669999957084655800f, 
-0.6715590357780456500f, 
-0.6760928034782409700f, 
-0.6806011199951171900f, 
-0.6850838065147399900f, 
-0.6895406842231750500f, 
-0.6939714550971984900f, 
-0.6983762383460998500f, 
-0.7027547359466552700f, 
-0.7071067690849304200f, 
-0.7114322185516357400f, 
-0.7157308459281921400f, 
-0.7200025320053100600f, 
-0.7242471575736999500f, 
-0.7284644246101379400f, 
-0.7326543331146240200f, 
-0.7368166446685791000f, 
-0.7409512400627136200f, 
-0.7450578808784484900f, 
-0.7491365075111389200f, 
-0.7531867623329162600f, 
-0.7572088241577148400f, 
-0.7612023949623107900f, 
-0.7651672959327697800f, 
-0.7691033482551574700f, 
-0.7730104923248291000f, 
-0.7768884897232055700f, 
-0.7807372808456420900f, 
-0.7845566868782043500f, 
-0.7883464694023132300f, 
-0.7921066880226135300f, 
-0.7958369851112365700f, 
-0.7995373606681823700f, 
-0.8032076358795166000f, 
-0.8068475127220153800f, 
-0.8104571700096130400f, 
-0.8140363097190856900f, 
-0.8175848126411438000f, 
-0.8211025595664978000f, 
-0.8245893120765686000f, 
-0.8280450701713562000f, 
-0.8314696550369262700f, 
-0.8348629474639892600f, 
-0.8382247686386108400f, 
-0.8415550589561462400f, 
-0.8448536396026611300f, 
-0.8481204509735107400f, 
-0.8513553142547607400f, 
-0.8545579910278320300f, 
-0.8577286005020141600f, 
-0.8608669638633728000f, 
-0.8639728426933288600f, 
-0.8670462369918823200f, 
-0.8700870275497436500f, 
-0.8730950355529785200f, 
-0.8760701417922973600f, 
-0.8790122866630554200f, 
-0.8819213509559631300f, 
-0.8847971558570861800f, 
-0.8876397013664245600f, 
-0.8904488086700439500f, 
-0.8932242989540100100f, 
-0.8959662318229675300f, 
-0.8986744880676269500f, 
-0.9013488292694091800f, 
-0.9039893150329589800f, 
-0.9065957069396972700f, 
-0.9091680049896240200f, 
-0.9117060899734497100f, 
-0.9142097830772399900f, 
-0.9166790843009948700f, 
-0.9191138744354248000f, 
-0.9215140938758850100f, 
-0.9238796234130859400f, 
-0.9262102842330932600f, 
-0.9285060763359069800f, 
-0.9307669401168823200f, 
-0.9329928159713745100f, 
-0.9351835250854492200f, 
-0.9373390078544616700f, 
-0.9394592642784118700f, 
-0.9415441155433654800f, 
-0.9435935020446777300f, 
-0.9456073641777038600f, 
-0.9475856423377990700f, 
-0.9495282173156738300f, 
-0.9514350891113281300f, 
-0.9533060789108276400f, 
-0.9551412463188171400f, 
-0.9569403529167175300f, 
-0.9587034583091735800f, 
-0.9604305028915405300f, 
-0.9621214270591735800f, 
-0.9637760519981384300f, 
-0.9653944373130798300f, 
-0.9669764637947082500f, 
-0.9685221314430236800f, 
-0.9700312614440918000f, 
-0.9715039134025573700f, 
-0.9729399681091308600f, 
-0.9743394255638122600f, 
-0.9757021665573120100f, 
-0.9770281910896301300f, 
-0.9783173799514770500f, 
-0.9795697927474975600f, 
-0.9807853102684021000f, 
-0.9819638729095459000f, 
-0.9831054806709289600f, 
-0.9842100739479064900f, 
-0.9852776527404785200f, 
-0.9863080978393554700f, 
-0.9873014092445373500f, 
-0.9882575869560241700f, 
-0.9891765117645263700f, 
-0.9900582432746887200f, 
-0.9909026622772216800f, 
-0.9917097687721252400f, 
-0.9924795031547546400f, 
-0.9932119250297546400f, 
-0.9939069747924804700f, 
-0.9945645928382873500f, 
-0.9951847195625305200f, 
-0.9957674145698547400f, 
-0.9963126182556152300f, 
-0.9968203306198120100f, 
-0.9972904920578002900f, 
-0.9977231025695800800f, 
-0.9981181025505065900f, 
-0.9984756112098693800f, 
-0.9987954497337341300f, 
-0.9990777373313903800f, 
-0.9993223547935485800f, 
-0.9995294213294982900f, 
-0.9996988177299499500f, 
-0.9998306035995483400f, 
-0.9999247193336486800f, 
-0.9999811649322509800f, 
-1.0000000000000000000f
};
// In-place DFT-2, output is (a,b). Arguments must be variables.
#define DFT2(a, b) { float2 tmp = a - b; a += b; b = tmp; }

// Return A*B
float2 mul(float2 a, float2 b) {
    return (float2)(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

// Return A * exp(ALPHA * i)

float2 twiddle(float2 a, float alpha) {
    float cs, sn;
    sn = sincos(alpha, &cs);
    return mul(a, (float2)(cs, sn));
}

float2 twiddle2(float2 a, int i) {
    float cs, sn;
    sn = tsin[i];
    cs = tcos[i];
    return mul(a, (float2)(cs, sn));
}


// Compute T x DFT-2.
// T is the number of threads.
// N = 2*T is the size of input vectors.
// X[N], Y[N]
// P is the length of input sub-sequences: 1,2,4,...,T.
// Each DFT-2 has input (X[I],X[I+T]), I=0..T-1,
// and output Y[J],Y|J+P], J = I with one 0 bit inserted at postion P. */

kernel void fftRadix2Kernel(global const float2 *x, global float2 *y, int p) {
    int t = get_global_size(0); // thread count
    int i = get_global_id(0);   // thread index
    int k = i & (p - 1);            // index in input sequence, in 0..P-1
    int j = ((i - k) << 1) + k;     // output index

    float alpha = -(float)M_PI * (float)k / (float)p;

    // Read and twiddle input
    x += i;
    float2 u0 = x[0];
    float2 u1 = twiddle(x[t], alpha);
    // float2 u1 = twiddle2(x[t], (512 * (k + 1))  / p - 1);

    // In-place DFT-2
    DFT2(u0, u1);

    // Write output
    y    += j;
    y[0]  = u0;
    y[p]  = u1;
}

